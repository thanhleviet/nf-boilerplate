manifest {
    name            = 'Your_Project_Name'
    author          = 'Your_Name'
    homePage        = 'Your_Project_Repository_URL'
    description     = 'Your_Project_Description'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = 'Your_Project_Version'
    doi             = 'Your_DOI_or_Publication_References'
}

includeConfig './config/plugins.conf'
includeConfig './config/bases.conf'
includeConfig './config/params.conf'
includeConfig './config/modules.conf'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

profiles {
    debug {
        cleanup                = false
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
    }

    conda {
        apptainer.enabled      = false
        charliecloud.enabled   = false
        conda.enabled          = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
    }

    mamba {
        apptainer.enabled      = false
        charliecloud.enabled   = false
        conda.enabled          = true
        conda.useMamba         = true
        charliecloud.enabled   = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
    }

    micromamba {
        apptainer.enabled      = false
        charliecloud.enabled   = false
        conda.enabled          = true
        conda.useMicromamba    = true
        charliecloud.enabled   = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
    }

    docker {
        apptainer.enabled      = false
        charliecloud.enabled   = false
        conda.enabled          = false
        docker.enabled         = true
        docker.userEmulation   = { params.use_gatk_spark ? false : true }.call()
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
    }

    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }

    singularity {
        apptainer.enabled      = false
        charliecloud.enabled   = false
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.autoMounts = true
        singularity.enabled    = true
    }

    podman {
        apptainer.enabled      = false
        charliecloud.enabled   = false
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = true
        shifter.enabled        = false
        singularity.enabled    = false
    }

    shifter {
        apptainer.enabled      = false
        charliecloud.enabled   = false
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = true
        singularity.enabled    = false
    }

    charliecloud {
        apptainer.enabled      = false
        charliecloud.enabled   = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
    }

    apptainer {
        apptainer.enabled      = true
        charliecloud.enabled   = false
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
    }
    gitpod {
        executor.cpus          = 16
        executor.memory        = 60.GB
        executor.name          = 'local'
    }

    wave {
        wave.enabled           = true
        wave.strategy          = ['conda']
        wave.build.conda.basePackages = ['conda-forge::procps-ng']
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}


def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
